@*@using Microsoft.Marketplace.SaasKit.Models*@

@using Marketplace.SaaS.Accelerator.Services.Models
@model Marketplace.SaaS.Accelerator.Services.Models.SubscriptionResultExtension

@{
    ViewData["Title"] = "Home";
}
@if (!Model.ShowWelcomeScreen)
{
    <div class="container" id="divHome">
        <form method="post" id="frmIndex">

            <div class="text-center">
                <h1 class="display-4"><a href="https://www.videospace.co" target="_blank"><img src="https://vsaas.videospace.co/included/images/videospace_logo.png" style="max-width: 300px; display: block; margin-left: auto; margin-right: auto; padding-top:10px;padding-bottom:10px;" id="headerImage" /></a></h1>
            </div>

            <div class="text-white mt20">
                <span class="cm-section-heading">Video-Search-as-a-Service (VSaaS) - Subscription Details</span>
            </div>
            @if (Model != null && !string.IsNullOrEmpty(Model.ErrorMessage))
            {
                <div class="alert alert-danger">
                    <strong>Error!</strong> Some Error Occurred During Operation!
                </div>
            }
            else
            {
                <div class="cm-panel-default mt20">
                    <dl class="row text-left">
                        <dt class="col-sm-3 p-2 p10">
                            @Html.DisplayName("Customer Email")
                        </dt>
                        <dd class="col-sm-9 p-2 p10">
                            @Html.DisplayFor(model => model.CustomerEmailAddress)
                        </dd>
                        <dt class="col-sm-3 p-2 p10">
                            @Html.DisplayName("Customer Name ")
                        </dt>
                        <dd class="col-sm-9 p-2 p10">
                            @Html.DisplayFor(model => model.CustomerName)
                        </dd>
                        <dt class="col-sm-3 p-2 p10">
                            @Html.DisplayName("ID ")
                        </dt>
                        <dd class="col-sm-9 p-2 p10">
                            @Html.DisplayFor(model => model.Id)
                        </dd>
                        <dt class="col-sm-3 p-2 p10">
                            @Html.DisplayName("Name ")
                        </dt>
                        <dd class="col-sm-9 p-2">
                            @Html.DisplayFor(model => model.Name)
                        </dd>
                        <dt class="col-sm-3 p-2 p10">
                            @Html.DisplayName("Status ")
                        </dt>
                        <dd class="col-sm-9 p-2 p10">
                            @Html.DisplayFor(model => model.SubscriptionStatus)
                        </dd>
                        <dt class="col-sm-3 p-2 p10">
                            @Html.DisplayName("Offer Name ")
                        </dt>
                        <dd class="col-sm-9 p-2 p10">
                            @Html.DisplayFor(model => model.OfferId)
                        </dd>
                        <dt class="col-sm-3 p-2 p10">
                            @Html.DisplayName("Plan ")
                        </dt>
                        <dd class="col-sm-9 p-2 p10">
                            @Html.DisplayFor(model => model.PlanId)
                        </dd>
                        <dt class="col-sm-3 p-2 p10">
                            @Html.DisplayName("Purchaser Email ")
                        </dt>
                        <dd class="col-sm-9 p-2 p10">
                            @Html.DisplayFor(model => model.Purchaser.EmailId)
                            @Html.HiddenFor(model => model.Purchaser.EmailId)
                        </dd>

                        <dt class="col-sm-3 p-2 p10">
                            @Html.DisplayName("Azure Tenant ID ")
                        </dt>
                        <dd class="col-sm-9 p-2 p10">
                            @Html.DisplayFor(model => model.Purchaser.TenantId)
                            @Html.HiddenFor(model => model.Purchaser.TenantId)
                        </dd>

                        @if (Model.SubscriptionParameters != null && Model.SubscriptionParameters.Count() > 0)
                        {

                            for (int i = 0; i < Model.SubscriptionParameters.Count(); i++)
                            {
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].Id)
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].PlanAttributeId)
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].ValueType)
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].PlanId)
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].OfferId)
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].SubscriptionId)
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].DisplayName)
                                @Html.HiddenFor(model => model.SubscriptionParameters[i].Type)

                                if (Model.SubscriptionStatus == SubscriptionStatusEnumExtension.PendingFulfillmentStart)
                                {
                                    <dt class="col-sm-3 p-2 p10 @Model.SubscriptionParameters[i].Type">
                                        @Html.DisplayFor(model => model.SubscriptionParameters[i].DisplayName, new { required = "required", @class = @Model.SubscriptionParameters[i].Type })
                                        @if (Model.SubscriptionParameters[i].IsRequired == true)
                                        {
                                            <span class="red-star @Model.SubscriptionParameters[i].Type">*</span>
                                        }


                                    </dt>
                                }
                                else
                                {
                                    @if (Model.SubscriptionParameters[i].Type.ToLower() == "input")
                                    {
                                        <dt class="col-sm-3 p-2 p10 @Model.SubscriptionParameters[i].Type">
                                            @Html.DisplayFor(model => model.SubscriptionParameters[i].DisplayName)
                                        </dt>
                                    }
                                }

                                @if (Model.SubscriptionStatus == SubscriptionStatusEnumExtension.PendingFulfillmentStart)
                                {
                                    @if (Model.SubscriptionParameters[i].FromList == true)
                                    {
                                        var data = Model.SubscriptionParameters[i].ValuesList;
                                        var selectList = new SelectList(data.Split(','));


                                        <dd class="col-sm-9 p-2 p10 @Model.SubscriptionParameters[i].Type">

                                            @if (Model.SubscriptionParameters[i].IsRequired == true)
                                            {
                                                @Html.DropDownList(string.Format("SubscriptionParameters[{0}].Value", @i), selectList, new { @class = @Model.SubscriptionParameters[i].Type + " w200", @required = "required", name = string.Format("SubscriptionParameters[{0}].Value", @i), @id = string.Format("SubscriptionParameters_{0}__Value", @i) })

                                            }
                                            else
                                            {
                                                @Html.DropDownList(string.Format("SubscriptionParameters[{0}].Value", @i), selectList, new { @class = @Model.SubscriptionParameters[i].Type + " w200", name = string.Format("SubscriptionParameters[{0}].Value", @i), @id = string.Format("SubscriptionParameters_{0}__Value", @i) })

                                            }

                                        </dd>

                                    }
                                    else if (Model.SubscriptionParameters[i].Htmltype == "date")
                                    {
                                        <dd class="col-sm-9 p-2 p10 @Model.SubscriptionParameters[i].Type">

                                            @if (Model.SubscriptionParameters[i].IsRequired == true)
                                            {
                                                @Html.TextBoxFor(model => model.SubscriptionParameters[i].Value, new { @class = @Model.SubscriptionParameters[i].Type + " w200", @required = "required", @type = @Model.SubscriptionParameters[i].Htmltype })
                                            }
                                            else
                                            {
                                                @Html.TextBoxFor(model => model.SubscriptionParameters[i].Value, new { @class = @Model.SubscriptionParameters[i].Type + " w200", @type = @Model.SubscriptionParameters[i].Htmltype })
                                            }

                                        </dd>
                                    }
                                    else
                                    {
                                        <dd class="col-sm-9 p-2 p10 @Model.SubscriptionParameters[i].Type">

                                            @if (Model.SubscriptionParameters[i].IsRequired == true)
                                            {
                                                @Html.TextBoxFor(model => model.SubscriptionParameters[i].Value, new { @class = @Model.SubscriptionParameters[i].Type + " w200", @required = "required", @type = @Model.SubscriptionParameters[i].Htmltype })
                                            }
                                            else
                                            {
                                                @Html.TextBoxFor(model => model.SubscriptionParameters[i].Value, new { @class = @Model.SubscriptionParameters[i].Type + " w200", @type = @Model.SubscriptionParameters[i].Htmltype })
                                            }

                                        </dd>
                                    }
                                }
                                else
                                {
                                    @if (Model.SubscriptionParameters[i].Type.ToLower() == "input")
                                    {
                                        <dd class="col-sm-9 p-2 p10  @Model.SubscriptionParameters[i].Type">
                                            @Html.DisplayFor(model => model.SubscriptionParameters[i].Value)
                                            @Html.HiddenFor(model => model.SubscriptionParameters[i].Value)
                                        </dd>
                                    }
                                }
                            }

                        }

                    </dl>
                </div>
                <div class="text-right">
                    @if (Model.SubscriptionStatus == SubscriptionStatusEnumExtension.Subscribed)
                    {
                        <button type="submit" asp-action="SubscriptionOperation" asp-route-subscriptionId="@Model.Id" asp-route-planId="@Model.PlanId" asp-route-operation="Deactivate" class="cm-button-danger text-right">Unsubscribe</button>
                        <button type="submit" asp-action="Subscriptions" class="cm-button-default text-right">Go to Subscription List</button>
                    }
                    @if (Model.SubscriptionStatus == SubscriptionStatusEnumExtension.PendingFulfillmentStart && Model.IsAutomaticProvisioningSupported == true)
                    {
                        <a onclick="SubscriptionOperation('@Model.Id','@Model.PlanId','Activate')" id="btnActive" class="cm-button-default text-right">Activate</a>
                    }
                    @if (Model.SubscriptionStatus == SubscriptionStatusEnumExtension.PendingFulfillmentStart && Model.IsAutomaticProvisioningSupported == false)
                    {
                        <a onclick="SubscriptionOperation('@Model.Id','@Model.PlanId','Activate')" id="btnActive" class="cm-button-default text-right">Subscribe</a>
                    }
                </div>
            }
        </form>
    </div>


    <div class="text-left">
        <p>
            <h2>Video-Search-as-a-Service (VSaaS) by Videospace</h2>
            <ul>
                <li>Our unique proposition is <b>Deep Video Search</b>.</li>
                <li>Videospace search and extracts <b>video data and intelligence</b>.</li>
                <li>Videospace VSaaS allows you to find specific scenes instantly.</li>
            </ul>
        </p>
        <p>
            <h2>Video AI and Search</h2>
            Being pioneers in Deep Video Search, we created various <b>world's first in Deep Video Search</b>!<br/>
            Videospace's Video Search Engine, arguably the world's most advanced video search engine, is the first to combine various video data elements into a single video search platform:
            <ul>
                <li><b>Speech Recognition</b> (More than 100 languages)</li>
                <li><b>Translation</b> (more than 60 languages)</li>
                <li><b>Tags in multi-languages</b> (from speech)</li>
                <li><b>Tags or Labels</b> (from visual)</li>
                <li><b>Object</b> detection (detects over 20,000 objects)</li>
                <li><b>Logo</b> detection (from major global brands)</li>
                <li><b>Faces</b> (detects up to 64 faces in a single frame)</li>
                <li><b>Emotion</b> (detects up to 8 major emotions)</li>
            </ul>
        </p>
        <p>
            <h2>Why is Video Search so important?</h2>
            Videospace allows you to:
            <ol>
                <li><b>Extend</b> your video’s reach globally by translating into another language.</li>
                <li><b>Search</b> your videos. Allowing users to discover content instantly.</li>
                <li><b>Extract</b> video data and intelligence, giving you insights and analytics.</li>
                <li><b>Market</b> your services by generating Video SEO in multiple languages automatically.</li>
            </ol>
        </p>
        <p>For more information, please check out our <a href="https://www.videospace.co" target="_blank">website</a>.</p>

    </div>
}
else
{
    <div class="pt-5">
        <div class="card p-3 ">
            <div class="text-center">
                <h1 class="display-4"><a href="https://www.videospace.co" target="_blank"><img src="https://vsaas.videospace.co/included/images/videospace_logo.png" style="max-width: 300px; display: block; margin-left: auto; margin-right: auto; padding-top:10px;padding-bottom:10px;" id="headerImage" /></a></h1>
            </div>
            <div class="text-left">
                <p>
                    <h2>Video-Search-as-a-Service (VSaaS) by Videospace</h2>
                    <ul>
                        <li>Our unique proposition is <b>Deep Video Search</b>.</li>
                        <li>Videospace search and extracts <b>video data and intelligence</b>.</li>
                        <li>Videospace VSaaS allows you to find specific scenes instantly.</li>
                    </ul>
                </p>
                <p>
                    <h2>Video AI and Search</h2>
                    Being pioneers in Deep Video Search, we created various <b>world's first in Deep Video Search</b>!
                    Videospace's Video Search Engine, arguably the world's most advanced video search engine, is the first to combine various video data elements into a single video search platform:
                    <ul>
                        <li><b>Speech Recognition</b> (More than 100 languages)</li>
                        <li><b>Translation</b> (more than 60 languages)</li>
                        <li><b>Tags in multi-languages</b> (from speech)</li>
                        <li><b>Tags or Labels</b> (from visual)</li>
                        <li><b>Object</b> detection (detects over 20,000 objects)</li>
                        <li><b>Logo</b> detection (from major global brands)</li>
                        <li><b>Faces</b> (detects up to 64 faces in a single frame)</li>
                        <li><b>Emotion</b> (detects up to 8 major emotions)</li>
                    </ul>
                </p>
                <p>
                    <h2>Why is Video Search so important?</h2>
                    Videospace allows you to:
                    <ol>
                        <li><b>Extend</b> your video’s reach globally by translating into another language</li>
                        <li><b>Search</b> your videos. Allowing users to discover content instantly.</li>
                        <li><b>Extract</b> video data and intelligence, giving you insights and analytics.</li>
                        <li><b>Market</b> your services by generating Video SEO in multiple languages automatically.li>
                    </ol>
                </p>
                <p>For more information, please check out our <a href="https://www.videospace.co" target="_blank">website</a>.</p>
                <hr />
                <h2>Subscribe from Microsoft Marketplace</h2>
                <ul>
                    <li>Search for resources of type <b> Software as a Service (SaaS)</b>.</li>
                    <li>Search for 'Videospace'.</li>
                    <li>Click <b> Create</b> to subscribe to the offer.</li>
                    <li>Click <b>Configure Account </b> after the subscription created.</li>
                </ul>
            </div>
            <!--div class="text-left">
                <p>
                    Get started with integrating your <b> Software as a Service (SaaS) </b> solution with the <b> SaaS fulfillment APIs version 2 in Microsoft commercial marketplace. </b>
                </p>
                <p><a href="https://docs.microsoft.com/en-us/azure/marketplace/partner-center-portal/pc-saas-fulfillment-api-v2" target="_blank">Click here </a><span>for the API documentation.</span> </p>
            </div-->
        </div>
    </div>
}
<script type="text/javascript">

    function SubscriptionOperation(subscriptionId, planId, operation) {
        if (validate()) {
            var formobject = $('#frmIndex').serialize();
            $.ajax({
                url: '/Home/SubscriptionOperation',
                type: 'POST',
                data: formobject + "&subscriptionId=" + subscriptionId + "&planId=" + planId + "&operation=" + operation,
                cache: false,
                success: function (result) {
                    $('#divIndex').html(result);
                },
                Error:
                    function (result) {
                        $('#divIndex').html(result);
                    }
            });
        }
        else {
            swal({
                title: "Required",
                text: "Please fill all required values",
                icon: "warning"
            })

        }
    }


    function validate() {
        var valid = true;
        $(':input[required]:visible').each(function () {
            if ($(this).val() == "") //check loginc here
                return valid = false;
        });
        return valid;
    }
</script>